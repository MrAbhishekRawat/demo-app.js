function dist(x){
   
    
    if(x>=0,x<=100){
        return 5;
    }else if(x>=100,x<=500){
        return 8;
    }else if(x>500,x<1000){
        return 10;
    }else if(x>=1000){
        return 12;
    }
    
console.log(x);
    
}
console.log(dist(1000));





function marks(x){
    
    let y = x>=40? "pass":"fail";
    console.log(y);
}

marks(39);





function max(a,b){
    
    let y= a>b? a :b;
    console.log(y);
}
max(6,5);






function day(x){
    switch(x){
        case 1:
            return "Mon";
        break;
        case 2:
            return "Tue";
        break;
        case 3:
            return "Wed";
        break;
        case 4:
            return "Thu";
        break;
        case 5:
            return "Fri";
        break;
        case 6:
            return "Sat";
        break;
        case 0:
            return "Sun";
        break;
        default:
        return null;
    }
    console.log(x);
}
console.log(day(0));





let c;
if (c<= 100){
return 5;
}
else if (c>100 && c<500){
return 8;
}
else if (c>500 && c<1000){
return 10;
}
else (c>1000);{
return 12;
}

function has_passed(r){
let r;
r=marks>=40 ?"pass" : "fail"
console.log('r')
}

function max(a,b){
    let result;
    
    result= a>b ?"a" : "b"
    
    console.log('result')
}


function weekdays(d){
let d;
switch (d){
case 1:
d = monday;
break;
case 2:
d= tuesday;
break;
case 3:
d= wednesday;
break;
case 4:
d = thursday;
break;
case 5:
d = friday;
break;
case 6 :
d = saturday;
break;
case 7 :
d = sunday;
break;
default:
d = invalid;
}
console.log('d')
}


function choice(c){
let c;
switch (c){
case 1:
c = "choice is 1";
break;
case 2:
c = "choice is 2";
break;
case 3:
c = "choice is 3";
break;
case 4:
c = "choice is 4";
break;
default:
c = "choice is other than 1,2,3 and 4";
}
console.log('c')
}


function even(n){
    let x=0;

    while(x<=n){
        if(x%2==0){
            console.log(x);
        }
        x++;
        
        
    }
    
}
even(10);






function square(n){
    let x=1;
    
    while(x*x<=n){
        
            console.log(x*x);
            x++;
    }
        
        
}
square(49);


function print_series(n){
let x =1;
while(x<=n){
if(x%5!=0){
return x;
}
x++
}
}



function printdig(n){
    let str = n.toString();
    for(let i=0; i<=str.length;i++){
        console.log(str[i]);
    }
}
printdig(153);






function armstrong(n) {
    let y = 0;
    let str = n.toString();
    for (i = 0; i < str.length; i++) {
      
      y = y + str[i] * str[i] * str[i];
    }
  
    if (y == n) {
      return true;
    } else false;
  }
console.log(armstrong(153));








function armstrong(n) {
    
    let str = n.toString();
    let arr = str.split('');
    arr.reverse();
    str = arr.join('');
    return parseInt(str);

}
console.log(armstrong(123));
  


function reverse_digits(n){
let x= 0;
let y = 12345;
let z;

while(y != 0){
	
	z = y % 10;
    x = x* 10+z;
    y = Math.floor(y/10);
}

console.log(x);
}


function odd(n){
    let x=0;
    while(x<=n){
        if(x%2!=0){
            console.log(x);
            
        }
        x++;
    }
}
console.log(odd(10));





function cube(n){
    let x=0;
    while(x*x*x<=n){
    if(x){
        console.log(x*x*x);

    }
    x++;
}

}
cube(125);


function ser(n){
    
    
    for(let i=0; i<=n;i++){
        if(i%2==0) continue;
        if(i%4!=0){
             console.log(i);
        }
        
    }
}
ser(10);






function ser(n,m){
    for(let i=1;i<=n;i++){
        console.log(i);
        if(i==m) break;
    }
}
ser(10,6);






function pyramid(){
       for (let i=0; i<5;i++){
    let str= '';
    for(let j=0; j<5-i;j++){
        str += ' ';
    }
    for(k=0;k<=i;k++){
        str+= '* ';
    }
    console.log(str);
}  
}




            
            
            for (let i=1;i<=5;i++){
    let str="";
    for(let j=1;j<=i;j++ ){
        str=str+"*";
    }
    for(let j=6;j<=10-i;j++ ){
        str=str+" ";
    }
    for(let j=1;j<=i;j++ ){
        str=str+"*";
    }
    console.log(str)
}










store n no. in array

 let arr=10;
 let x =1;
 while(arr>=x){
     
     console.log(arr)
     arr--
 }
 
 
 
 max of an array
 
 
  let array= [10,8,6,4,92];
 console.log(Math.max(...array));
 
 
 
 
 
 function prime(n){
    if(n<2)return false;

    for(let i=2;i<=Math.sqrt(n);i++){
        if(n%i==0)return false;
        
    }
    return true;
}
for(let i=0; i<=50;i++){
    if(prime(i)){
        console.log([i]);
}
}






function prime(n){
    for(let i=2; i<=n;i++){
        let notPrime= false;
        for(let j=2; j<=i;j++){
            if(i%j==0 && j!=i) notPrime= true;

        }if (notPrime== false) console.log(i);

    }
}
prime(50);







function subarray(n){
    
    for(let i=0; i<=n.length;i++){
        for(let j=i; j<n.length;j++){
            console.log(n.slice(i, j+1));
        }

    }

    
}
subarray([1,2,3,8]);
 
 
 
 
 
 
 print all subarrays 
 
 let x = [];
for (i=0; i<x.length; i++){
    for (j=i; j<x.length; j++){
        let str = "";
        for (k=i; k<=j; k++){
          str= str+x[k]; 
        }
        console.log(str);
    }
}
        
        
        
max of subarrays

let arr= [1,2,3]
let a1 = 0
let a2 = arr[0]
    
arr.forEach((i,a) => {
    a1 = Math.max(i, a1 + i)
    a2 = Math.max(a2, a1)
    
})

console.log(a2); 



function maxSubarr(arr) {
    let maxSum = Number.MIN_SAFE_INTEGER;
  
    for (let i = 0; i < arr.length; i++) {
      let sum = 0;
      for (let j = i; j < arr.length; j++) {
        sum += arr[j];
        maxSum = Math.max(maxSum, sum);
      }
    }
  
    return maxSum;
  }
  console.log(maxSubarr([1,2,3]));
  
  
  
  
  
  
  
  function runsum(arr){

    let result= [];
    for(let i=0; i<arr.length;i++){
        let sum=0;
        for(j=i;j<arr.length;j++){
            sum+= arr[j];
            result.push(sum);
        }
        

    }
    return result;
}
console.log(runsum([1,2,3,4]));







function maximumWealth(arr) {
    let min = 0;
    let max = 0;
    for (let i = 0; i < arr.length; i++) {
        let x = arr[i].length;
        for (let j = 0; j < x; j++) {
            max += arr[i][j]
        }
        if (max > min) {
            min = max;
            max=0;
            
        } else {
            max = 0;
        }
    }
    return min;
};
console.log(maximumWealth([[1,2,3],[4,2,1]]));






function oddlensum(arr){
    let sum =0;
       for(let i=0; i<arr.length; i++){
        for(let j=i; j<arr.length; j++){
            if((i-j)%2==0){
                for(let k=i; k<=j; k++){
                    sum+= arr[k];
                }
            }
            
        }
       } 
       return sum;

}
console.log(oddlensum([1,2,3]));




function rotate(arr, n){
    let x= arr.length;
    if(x==0 || n==0)return;
    n%=x;
    for(let i=0; i<x-n; i++){
        arr.push(arr.shift());
    }return arr;
}
console.log(rotate([1,2,3], 1));









function hammingWeight(n) {
    let count = 0;
    for (let i = 0; i < 32; i++) {
        if (n & 1 === 1) count++;
        n >>= 1;

    }
    return count;
};
//input should be in stringlength 32








function altbit(n){
    let bits = n.toString(2);
    
    for(let i=0; i<bits.length; i++){
        if(bits[i] == bits[i+1]) return false;
        
        
    }
    return true;
    
    
}
console.log(altbit(8));










                                                             OPPS




class student{
    constructor( name= "john", rollno= "02"){
        this.name= name;
        this.rollno= rollno;
    }

    

}
let student1 = new student ("abhi", "01");
let student2 = new student ();
console.log(student1.name);
console.log(student1.rollno);





class Triangle{
  constructor(a,b,c){
    this.a=a;
    this.b=b;
    this.c=c;
  }
  CalPeri(){
    
    console.log("peri=", this.a+this.b+this.c);

  }
  CalArea(){
    let s= (this.a+this.b+this.c)/2;
    console.log("area=", Math.sqrt(s*(s-this.a)*(s-this.b)*(s-this.c)));
    
  }
}
let t1 = new Triangle(4,5,3);
t1.CalPeri();
t1.CalArea();










class Emp{
  constructor(name,year,add){
    this.name= name;
    this.year=year;
    this.add=add;
  }
  details(){
    console.log("Name",this.name,"Joining Year", this.year, "Address", this.add);
  }
}
let e1= new Emp("Robert",1994,"64C- WallsStreat");
let e2= new Emp("Sam",2000,"68D- WallsStreat");
let e3= new Emp("John",1999,"26B- WallsStreat");

e1.details();








class emp{
  constructor(hours,sal){
    this.hours=hours;
    this.sal=sal;
  }
  getInfo(){
    console.log("Salary", this.sal);
    console.log("Work hours", this.hours);
  }
  addsal(){
    let res=0;
    if(this.sal<500) res=res+10;
    return res;
    }
  addwork(){
    let res=0;
      if(this.hours>6) res=res+5;
      return res;
      }
  printSal(){
      return this.sal+this.addsal()+this.addwork();

    }

  }

let e1= new emp(6,400);
console.log(e1.printSal());












class object{
  
    static count = 1;

    static getCount(){
      return this.count++;
    }
  }
  console.log(object.getCount());
   
  
  or
  
  
  class CountObj{
  
    static count = 0;

    constructor(){
      CountObj.count++;
    }
  }
let o1= new CountObj();
let o2= new CountObj();
console.log(CountObj.count);







class Parent {
  parentMethod() {
    console.log("This is parent class");
  }
}
class Child extends Parent {
  childMethod() {
    console.log("This is child class");
  }
}
let parent1= new Parent();
parent1.parentMethod();

let child1 = new Child();
child1.childMethod();

child1.parentMethod();









class Person{
    constructor(name, age){
        this.name= name;
        this.age= age;
    }
    link(){
        console.log("hello", this.name);
        console.log("you are", this.age, "year old");
    }
}
class Student extends Person{
    constructor(name,age,gpa){
        super(name,age);
        this.gpa= gpa;
    }
    hello(){
        super.link();
        console.log("your gpa is", this.gpa);
    }
}
class Teacher extends Person{
    constructor(name,age,classteacher){
        super(name,age);
        this.classteacher= classteacher;
    }
    hello(){
        super.link();
        console.log("you are class teacher of", this.classteacher);
    }
}
let teacher1= new Teacher("Mona", 35, 6);
let student1= new Student("Shubh", 15, 8.2);

student1.hello();
teacher1.hello();









class Member{
    constructor(name,age,phone,add,sal){
        this.name= name;
        this.age= age;
        this.phone= phone;
        this.add= add;
        this.sal= sal;
    }
    link(){
        console.log("name", this.name);
        console.log("age", this.age);
        console.log("phone", this.phone);
        console.log("address", this.add);
        console.log("salary", this.sal);
    }
}
class Emplpoyee extends Member{
    constructor(name,age,phone,add,sal,specializtion){
        super(name,age,phone,add,sal);
        this.specializtion= specializtion;
    }
    hello(){
        super.link();
        console.log("specialization", this.specializtion);
    }
    printsal(){
        console.log(this.sal);
    }
}
class Manager extends Member{
    constructor(name,age,phone,add,sal,dept){
        super(name,age,phone,add,sal);
        this.dept= dept;
    }
    hello(){
        super.link();
        console.log("department", this.dept);
    }
    printsal(){
        console.log(this.sal);
    }

}
let emp1 = new Emplpoyee("Om",25,81001521,"H-53","3k","dev");
let man1 = new Manager("Karan",35,258741369,"N-98","4k","HR");

emp1.hello();
man1.hello();

emp1.printsal();
man1.printsal();









class Shape{
    one(){
        console.log("this is shape");
    }
}
class Circle extends Shape{
    circleshape(){
        console.log("circle");
    }
}
class Rect extends Shape{
    rectshape(){
        console.log("rectangle");
    }
}
class Square extends Rect{
    squareshape(){
        console.log("square is rectangle");
    }
}
let x = new Rect();
let y = new Square();
let z= new Circle();







function search(arr, n){
    if(!arr.includes(n)) return -1;
    else return arr.indexOf(n);
    
}
console.log(search([2,5,8,9], 8));



           OR




function search(arr,n){
    let start =0;
    let end= arr.length-1;
    let position = undefined;
    while(start<=end){
        let mid = Math.floor((start+end)/2);
        if(arr[mid]==n){

         position=mid;
         break;
    }
        else if(arr[mid]<n){
            start=mid+1;
        }
        else{
            start=mid-1;
        }
    }
    console.log(position);
}

search([1,23,33,35,45,],35);







function peak(arr){
    if(arr.length==1) return 0;
    for(let i=1; i<=arr.length-1; i++){
        if(arr[i]>arr[i-1] && arr[i]>arr[i+1]){
            return i;
        }
    }
    if(arr[0]>arr[1]) return 0;
    if(arr[arr.length-1]>arr[arr.length-2]) return arr.length-1;
    return 0;
}
console.log(search([1,2,6,4,5]));



      OR




function peak(arr){
    
    for(let i=1; i<arr.length-1;i++){
        if( arr[i]>arr[i-1] && arr[i]>arr[i+1]){
            
            console.log(`${i}`);
        }
    }
    
    
}
console.log(search([1,3,5,6,4]));




      OR
      
      

function peak(arr){
    
    for(let i=1; i<arr.length-1;i++){
        if( arr[i]>arr[i-1] && arr[i]>arr[i+1]){
            
            console.log(`Value: ${arr[i]},Position: ${i}`);
        }
    }
    
    
}
console.log(search([1,2,1,3,5,6,4]));








function search(arr,k){
    let start = 0;
    let end = arr.length-1;
    while(start<=end){
        let mid = Math.floor(start+(end-start)/2);
        if(arr[mid]==k)return mid;
        else if(arr[start]<=arr[mid]){
            if (k<arr[mid] && k>=arr[start]) end= mid-1;
            else start= mid+1;
        }
        else if(arr[mid]<= arr[end]){
            if(k > arr[mid] && k <= arr[end]) start= mid+1;
            else end= mid +1;
        }

    }
    return -1;
}
console.log(search([4,5,6,7,0,1,2], 0));









function twoSum(arr, target){
    let map= new Map();
    for (let i= 0; i<arr.length; i++){
        const x= target - arr[i];
        if (map.has(x))return [map.get(x), i];
        
        map.set(arr[i],i);
    }
    
}
console.log(twoSum([1,2,3,4,5,6], 5));



         or
         
         
         

function twoSum(nums, target) {
    for (let i = 0; i < nums.length; i++) {
        for (let j = i + 1; j < nums.length; j++) {
            if (nums[i] + nums[j] == target) {
                return [i, j];
            }
        }
    }
    return null;
}












function lucky(arr){
    let map= new Map();
    let max= 0;
    for(let i of arr){
        if(map.has(i)) map.set(i, map.get(i)+1);
        else map.set(i,1);
    }
    for(let [index, value] of map){
        if(index==value) max= Math.max(max, value);
    }
    return max> 0? max : -1;
}
console.log(lucky([2,3,3,4,4,4]));




        or



function findLucky(arr) {
  const map = new Map();
  for (const num of arr) {
    if (map.has(num)) {
      map.set(num, map.get(num) + 1);
    } else {
      map.set(num, 1);
    }
  }

  let maxLuckyInt = -1;
  for (const [num, count] of map) {
    if (num === count && num > maxLuckyInt) {
      maxLuckyInt = num;
    }
  }

  return maxLuckyInt;
}









class Employee {
    bubbleSort(arr){
        for(let i=arr.length-1; i>=0; i--){
            for (let j=1; j<=i; j++){
                if (arr[j-1].salary>arr[j].salary){
                    let temp=arr[j-1];
                    arr[j-1]=arr[j];
                    arr[j]= temp;
                }
            }
        }
        return arr;
    }
}

let arr = [{ name: 'James', salary: 90000 },
{ name: 'Dorthy', salary: 75000 },
{ name: 'Aby', salary: 80000 },
{ name: 'Tom', salary: 95000 },
{ name: 'Frank', salary: 85000 },];

let sorted = new Employee();
console.table(sorted.bubbleSort(arr));



               OR
               
               
               
               


class employee {
    constructor(arr) {
        let sorted = arr.sort(function (x, y) {
            return y.salary - x.salary;

        });
        return sorted;
    }
}
let emp = [
    { name: "James", salary: 90000 },
    { name: "Dorthy", salary: 75000 },
    { name: "Aby", salary: 80000 },
    { name: "Tom", salary: 95000 },
    { name: "Frank", salary: 85000 },
];
let x = new employee(emp);
console.log(x);
console.table(x);










function countPrimes(n) {
    let primeMap = new Map();
    for (let i = 2; i < n; i++) {
        if (!primeMap.has(i)) {
            primeMap.set(i, true);
            for (let j = i * 2; j < n; j += i) {
                primeMap.set(j, false);
            }
        }
    }

    let count = 0;
    for (let [num, isPrime] of primeMap) {
        if (isPrime) {
            count++;
        }
    }
    return count;
}
console.log(countPrimes(10));








function find(jewels, stones){
    let set= new Set(jewels);
    let count=0;
    for(let i of stones){
        if(set.has(i)) count++

    }
    return count;
}
console.log(find("aaB","AAaAAaaAaBbBB"));
  












        
          
        
        
